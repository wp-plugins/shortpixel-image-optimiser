<?php
/*
Plugin Name: ShortPixel Image Optimiser
Plugin URI: https://shortpixel.com/
Description: ShortPixel is an image compression tool that helps improve your website performance. The plugin optimises images automatically using both lossy and lossless compression. Resulting, smaller, images are no different in quality from the original. To install: 1) Click the "Activate" link to the left of this description. 2) <a href="https://shortpixel.com/free-sign-up">Free Sign up</a> for your unique API Key . 3) Check your email for your API key. 4) Use your API key to activate ShortPixel plugin in the 'Plugins' menu in WordPress. 5) Done!
Version: 1.0.3
Author: ShortPixel
Author URI: https://shortpixel.com
*/

require_once('shortpixel_api.php');
require_once( ABSPATH . 'wp-admin/includes/image.php' );

class WPShortPixel {

    private $_apiInterface = null;
    private $_apiKey = '';
    private $_compressionType = '';
    private $_processThumbnails = 1;

    public function __construct() {
        define('SP_DEBUG', false);
        define('SP_LOG', false);
        define('SP_MAX_TIMEOUT', 10);

        $this->populateOptions();

        $this->_apiInterface = new shortpixel_api($this->_apiKey, $this->_compressionType);

        //add hook for image upload processing
        add_filter( 'wp_generate_attachment_metadata', array( &$this, 'handleImageUpload' ), 10, 2 );
        add_filter( 'manage_media_columns', array( &$this, 'columns' ) );
        add_filter( 'plugin_action_links_' . plugin_basename(__FILE__), array(&$this, 'generatePluginLinks'));

        add_action( 'manage_media_custom_column', array( &$this, 'generateCustomColumn' ), 10, 2 );
        add_action( 'handleBulkProcessing', array( &$this, 'handleBulkProcessing' ) );


        //add settings page
        add_action( 'admin_menu', array( &$this, 'registerSettingsPage' ) );
        add_action( 'admin_menu', array( &$this, 'registerAdminPage' ) );
        add_action( 'admin_notices', array( &$this, 'displayNotice' ) );

    }

    public function populateOptions() {

        if(get_option('wp-short-pixel-apiKey') != false) {
            $this->_apiKey = get_option('wp-short-pixel-apiKey');
        }

        if(get_option('wp-short-pixel-compression') != false) {
            $this->_compressionType = get_option('wp-short-pixel-compression');
        }

        if(get_option('wp-short-process_thumbnails') != false) {
            $this->_processThumbnails = get_option('wp-short-process_thumbnails');
        } else {
            add_option('wp-short-process_thumbnails', $this->_processThumbnails, '', 'yes' );
        }

        if(get_option('wp-short-pixel-fileCount') === false) {
            add_option( 'wp-short-pixel-fileCount', 0, '', 'yes' );
        }

        if(get_option('wp-short-pixel-savedSpace') === false) {
            add_option( 'wp-short-pixel-savedSpace', 0, '', 'yes' );
        }

        if(get_option('wp-short-pixel-averageCompression') === false) {
            add_option( 'wp-short-pixel-averageCompression', 0, '', 'yes' );
        }
    }

    //handling older
    public function WPShortPixel() {
        $this->__construct();
    }

    public function handleImageUpload($meta, $ID = null) {
        $imageURL =  wp_get_attachment_url($ID);
        $imagePath = get_attached_file($ID);

        $result = $this->_apiInterface->processImage($imageURL, $imagePath, $ID);

        if(is_string($result)) {
            $meta['ShortPixelImprovement'] = $result;
            return $meta;
        } else {
            $processThumbnails = get_option('wp-short-process_thumbnails');

            //handle the rest of the thumbnails generated by WP
            if($processThumbnails && $result && !empty($meta['sizes'])) {
                foreach($meta['sizes'] as $thumbnailInfo) {
                    $thumbURL = str_replace(basename($imagePath), $thumbnailInfo['file'], $imageURL);
                    $thumbPath = str_replace(basename($imagePath), $thumbnailInfo['file'], $imagePath);
                    $this->_apiInterface->processImage($thumbURL, $thumbPath);
                }
            }
        }

        $meta['ShortPixelImprovement'] = $result->PercentImprovement;

        return $meta;
    }

    public function registerSettingsPage() {
        add_options_page( 'ShortPixel Settings', 'ShortPixel', 'manage_options', 'wp-shortpixel', array($this, 'renderSettingsMenu'));
    }

    function registerAdminPage( ) {
        add_media_page( 'ShortPixel Bulk Process', 'Bulk ShortPixel', 'edit_others_posts', 'wp-short-pixel-bulk', array( &$this, 'bulkProcesss' ) );
    }

    public function bulkProcesss() {
        echo '<h1>ShortPixel Bulk Processing</h1>';

        if ( function_exists( 'apache_setenv' ) ) {
            @apache_setenv('no-gzip', 1);
        }
        @ini_set('output_buffering','on');
        @ini_set('zlib.output_compression', 0);
        @ini_set('implicit_flush', 1);

        $attachments = null;
        $attachments = get_posts( array(
            'numberposts' => -1,
            'post_type' => 'attachment',
            'post_mime_type' => 'image'
        ));

        $bulkProcessingLog = get_option('bulkProcessingLog');
        $bulkProcessingRunning = false;

        if(
            is_null($bulkProcessingLog['endDate']) &&
            ( $bulkProcessingLog['lastUpdate'] <  $bulkProcessingLog['lastUpdate'] + 60 ) &&
            ( $bulkProcessingLog['startTime'] < $bulkProcessingLog['startTime'] + (60 * 15))
        ) {
            $bulkProcessingRunning = true;
        }

        if(isset($_POST['bulkProcess'])) {

            $scheduleResult = wp_schedule_single_event(time()+1, 'handleBulkProcessing');
            if(is_null($scheduleResult)) {
                $bulkProcessingLog = array(
                    'startTime' => time(),
                    'totalImageCount' => count($attachments),
                    'doneCount' => 0,
                    'log' => '',
                    'lastUpdate' => time(),
                    'endDate' => null
                );
                update_option('bulkProcessingLog', $bulkProcessingLog);
                echo "Bulk processing started. Please visite the Bulk processing page to view the status. </br>";
            }

            if($scheduleResult === false) {
                echo "There was a problem scheduling the bulk processing. Please try again later.";
            }

        } else {

            if ($bulkProcessingRunning) {
                echo  "{$bulkProcessingLog['doneCount']}/{$bulkProcessingLog['totalImageCount']} images processed</br></br>Processing log:</br>";
                echo $bulkProcessingLog['log'];
            } else {

                if(count($attachments)) {
                    if($bulkProcessingLog) { echo "Last succesful bulk processing done on {$bulkProcessingLog['totalImageCount']} images ("  . date("d-m-Y H:i:s", $bulkProcessingLog['endDate']) . ").</br>"; }
                    echo $this->getBulkProcessingForm(count($attachments));
                } else {
                    echo "It appear that you have no images uploaded yet.</br>";
                }
            }
        }

    }

    public function handleBulkProcessing() {
        //get all images
        $attachments = null;
        $attachments = get_posts( array(
            'numberposts' => -1,
            'post_type' => 'attachment',
            'post_mime_type' => 'image'
        ));
        //set up logging in db
        $bulkProcessingLog = get_option('bulkProcessingLog');
        //for each image
        foreach( $attachments as $attachment ) {
            //handle image processing
            $imageURL =  wp_get_attachment_url($attachment->ID);
            $imagePath = get_attached_file($attachment->ID);

            $processingResult = $this->_apiInterface->processImage($imageURL, $imagePath, $attachment->ID);

            if(!is_object($processingResult)) {
                $bulkProcessingLog['log'] .= "Error! Image " . basename($imagePath) . " could not be processed<br/>";
            }

            if($processingResult->Status->Code == 1) {
                $bulkProcessingLog['log'] .= "Image " . basename($imagePath) . " scheduled for processing.<br/>";
            } elseif($processingResult->Status->Code == 2) {
                $bulkProcessingLog['log'] .= "Image " . basename($imagePath) . " processed succesfully.<br/>";
            } else {
                $bulkProcessingLog['log'] .= "Error! Image " . basename($imagePath) . " could not be processed<br/>";
            }

            $bulkProcessingLog['doneCount'] = $bulkProcessingLog['doneCount'] + 1;
            $bulkProcessingLog['lastUpdate'] = time();
            update_option('bulkProcessingLog', $bulkProcessingLog);

        }

        $bulkProcessingLog['endDate'] = time();

        update_option('bulkProcessingLog', $bulkProcessingLog);

    }

    public function renderSettingsMenu() {
        if ( !current_user_can( 'manage_options' ) )  {
            wp_die('You do not have sufficient permissions to access this page.');
        }

        if(isset($_POST['submit'])) {
            //handle save options
            update_option('wp-short-pixel-apiKey', $_POST['key']);
            $this->_apiKey = $_POST['key'];
            $this->_apiInterface->setApiKey($this->_apiKey);
            update_option('wp-short-pixel-compression', $_POST['compressionType']);
            $this->_compressionType = $_POST['compressionType'];
            $this->_apiInterface->setCompressionType($this->_compressionType);
            if(isset($_POST['thumbnails'])) { $this->_processThumbnails = 1; } else { $this->_processThumbnails = 0; }
            update_option('wp-short-process_thumbnails', $this->_processThumbnails);
        }

        $checked = '';
        if($this->_processThumbnails) { $checked = 'checked'; }

        echo '<h1>ShortPixel Image Optimiser Settings</h1>';
        echo '<p>ShortPixel improves website performance by reducing the images’ size.<BR>Configure ShortPixel plugin to compress both past and new past images and optimise your website.</p>';

        $formHTML = <<< HTML
<form name='wp_shortpixel_options' action=''  method='post' id='wp_shortpixel_options'>
<table class="form-table">
<tbody><tr>
<th scope="row"><label for="key">API Key:</label></th>
<td><input name="key" type="text" id="key" value="{$this->_apiKey}" class="regular-text"></td>
</tr>
<tr><td style="padding-left: 0px;" colspan="2">Don’t have an API Key? <a href="https://shortpixel.com/wp-apikey" target="_blank">Sign up, it’s free.</a></td></tr>
<tr><th scope="row">
    <label for="compressionType">Compression type: <span title="
Lossy compression: lossy has a better compression rate than lossless compression. The resulting image is not 100% identical with the original. Works well for photos taken with your camera.
Lossless compression: the shrunk image will be identical with the original and smaller in size. Use this when you do not want to loose any of the original image's details. Works best for technical drawings, clip art and comics.
    ">?</span></label>
</th><td>
HTML;
        if($this->_compressionType == 'lossless') {
            $formHTML .= '<input type="radio" name="compressionType" value="lossy" >Lossy</br></br>';
            $formHTML .= '<input type="radio" name="compressionType" value="lossless" checked>Lossless';
        } else {
            $formHTML .= '<input type="radio" name="compressionType" value="lossy" checked>Lossy</br></br>';
            $formHTML .= '<input type="radio" name="compressionType" value="lossless" >Lossless';
        }

        $formHTML .= <<<HTML
</td>
</tr>
<tr>
<th scope="row"><label for="thumbnails">Compress also image thumbnails</label></th>
<td><input name="thumbnails" type="checkbox" id="thumbnails" {$checked}></td>
</tr>
</tbody></table>
<p class="submit"><input type="submit" name="submit" id="submit" class="button button-primary" value="Save Changes"></p>
</form>
<script>
var rad = document.wp_shortpixel_options.compressionType;
var prev = null;
for(var i = 0; i < rad.length; i++) {
    rad[i].onclick = function() {

        if(this !== prev) {
            prev = this;
        }
        alert('Select Media/Bulk Short Pixel to reprocess all the images');
    };
}
</script>
HTML;
        echo $formHTML;

        $fileCount = get_option('wp-short-pixel-fileCount');
        $savedSpace = self::formatBytes(get_option('wp-short-pixel-savedSpace'),2);
        $averageCompression = round(get_option('wp-short-pixel-averageCompression'),2);
        $savedBandwidth = self::formatBytes(get_option('wp-short-pixel-savedSpace') * 1000,2);

        $quotaData = $this->getQuotaInformation();

        $statHTML = <<< HTML
<h3>ShortPixlel Facts & Figures</h3>
<table class="form-table">
<tbody><tr>
<th scope="row"><label for="totalFiles">Your total number of processed files:</label></th>
<td>$fileCount</td>
</tr>
<tr>
<th scope="row"><label for="savedSpace">Saved space by ShortPixel</label></th>
<td>$savedSpace</td>
</tr>
<tr>
<th scope="row"><label for="savedBandwidth">Bandwith* saved with ShortPixel:</label></th>
<td>$savedBandwidth</td>
</tr>
<tr>
<th scope="row"><label for="apiQuota">Your ShortPixel plan</label></th>
<td>{$quotaData['APICallsQuota']}</td>
</tr>
<tr>
<th scope="row"><label for="usedQUota">Used Quota:</label></th>
<td>{$quotaData['APICallsMade']}</td>
</tr>
<tr>
<th scope="row"><label for="averagCompression">Average file size compression:</label></th>
<td>$averageCompression%</td>
</tr>
</tbody></table>
<p>* Saved bandwidth is calculated at 100,000 impressions/image</p>
HTML;
        echo $statHTML;
    }

    public function getBulkProcessingForm($imageCount) {
        return <<< HTML
</br>
Currently, you have {$imageCount} images in your library. </br>
</br>
<form action='' method="POST" >
<input type="submit" name="bulkProcess" id="bulkProcess" class="button button-primary" value="Compress all your images">
</form>
HTML;
    }

    public function displayNotice() {
        global $hook_suffix;

        $divHeader = '<div class="updated">';
        $divWarningHeader = '<div class="update-nag">';
        $divFooter = '</div>';

        $noticeActivationContent = 'ShortPixel plugin activated! Get an API key <a href="https://shortpixel.com/wp-apikey" target="_blank">here</a>. Sign up, it’s free.';
        $noticeWrongAPIKeyContent = 'API Key invalid!';
        $noticeCorrectAPIKeyContent = 'API Key valid!';

        if($hook_suffix == 'settings_page_wp-shortpixel' && !empty($_POST)) {
            $keyCheckData = $this->getQuotaInformation($_POST['key']);
            if($keyCheckData['APIKeyValid']) {
                echo $divHeader . $noticeCorrectAPIKeyContent . $divFooter;
            } else {
                echo $divWarningHeader . $noticeWrongAPIKeyContent . $divFooter;
            }
        }
        if($hook_suffix == 'plugins.php' && $_GET['activate']) { echo  $divHeader . $noticeActivationContent . $divFooter; }
    }

    static public function formatBytes($bytes, $precision = 2) {
        $units = array('B', 'KB', 'MB', 'GB', 'TB');

        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);

        $bytes /= pow(1024, $pow);

        return round($bytes, $precision) . ' ' . $units[$pow];
    }

    public function getQuotaInformation($apiKey = null) {

        if(is_null($apiKey)) { $apiKey = $this->_apiKey; }

        $requestURL = 'https://api.shortpixel.com/api-status.php?key='.$apiKey;
        $args = array('timeout'=> SP_MAX_TIMEOUT);
        $response = wp_remote_get($requestURL, $args);

        $defaultData = array(
            "APIKeyValid" => false,
            "APICallsMade" => 'Information unavailable. Please check your API key.',
            "APICallsQuota" => 'Information unavailable. Please check your API key.');

        if(is_object($response) && get_class($response) == 'WP_Error') {
            return $defaultData;
        }

        if($response['response']['code'] != 200) {
            return $defaultData;
        }

        $data = $response['body'];
        $data = $this->parseJSON($data);

        if(empty($data)) { return $defaultData; }

        if($data->Status->Code == '-401') { return $defaultData; }

        return array(
                     "APIKeyValid" => true,
                     "APICallsMade" => number_format($data->APICallsMade) . ' images',
                     "APICallsQuota" => number_format($data->APICallsQuota) . ' images'
        );


    }

    public function generateCustomColumn( $column_name, $id ) {
        if( 'wp-shortPixel' == $column_name ) {
            $data = wp_get_attachment_metadata($id);
            if ( isset( $data['ShortPixelImprovement'] ) ) {
                print $data['ShortPixelImprovement'];
                if(is_numeric($data['ShortPixelImprovement'])) print '%';
            } else {
                if ( wp_attachment_is_image( $id ) ) {
                    print 'Image not processed';
                }
            }
        }
    }

    public function columns( $defaults ) {
        $defaults['wp-shortPixel'] = 'Short Pixel Compression';
        return $defaults;
    }

    public function generatePluginLinks($links) {
        $in = '<a href="options-general.php?page=wp-shortpixel">Settings</a>';
        array_unshift($links, $in);
        return $links;
    }

    public function parseJSON($data) {
        if ( function_exists('json_decode') ) {
            $data = json_decode( $data );
        } else {
            require_once( 'JSON/JSON.php' );
            $json = new Services_JSON( );
            $data = $json->decode( $data );
        }
        return $data;
    }
}

$pluginInstance = new WPShortPixel();
global $pluginInstance;

?>
